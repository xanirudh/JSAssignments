QUESTION 1: Explore and explain the various methods in console function
=======================================================================

various methods in console functions are:

1. assert()	
    Writes an error message to the console if the assertion is false
    SYNTAX: console.assert(expression, message)

2. clear()	
    Clears the console.
    SYNTAX: console.clear()

3. count()
    Logs the number of times that this particular call to count() has been called
    SYNTAX: console.count(label)  

4. error()
	Outputs an error message to the console.
    SYNTAX: console.error(message)  

5. group()
	Creates a new inline group in the console. This indents following console messages by an additional level, until console.groupEnd() is called
    SYNTAX: console.group(label) 

6. groupCollapsed()
	Creates a new inline group in the console. However, the new group is created collapsed. The user will need to use the disclosure button to expand it
    SYNTAX: console.groupCollapsed(label)

7. groupEnd()
	Exits the current inline group in the console
    SYNTAX: console.groupEnd()

8. info()
	Outputs an informational message to the console
    SYNTAX: console.info(message)

9. log()
	Outputs a message to the console
    SYNTAX: console.log(message)

10. table()
	Displays tabular data as a table
    SYNTAX: console.table(tabledata, tablecolumns)

11. time()
	Starts a timer (can track how long an operation takes)
    SYNTAX: console.time(label)

12. timeEnd()
	Stops a timer that was previously started by console.time()
    SYNTAX: console.timeEnd(label)

13. trace()
	Outputs a stack trace to the console
    SYNTAX: console.trace(label)

14. warn()
	Outputs a warning message to the console
    SYNTAX: console.warn(message)




QUESTION 2 : Write the difference between var, let and const with code examples.
=================================================================================

VAR :
The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.
Example: var a =10;
Variable declarations are processed before the execution of the code.
The scope of a JavaScript variable declared with var is its current execution context.
The scope of a JavaScript variable declared outside the function is global.

VAR_CODE:
function assignment(){
  var a =10;
  console.log(a);  // output 10
  if(true){
   var a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 20
}


LET: 
The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.
Example: let a =10;
The let statement allows you to create a variable with the scope limited to the block on which it is used.
It is similar to the variable we declare in other languages like Java, .NET, etc.

LET_CODE:

function assignment(){
  let a =10;
  console.log(a);  // output 10
  if(true){
   let a=20;
   console.log(a); // output 20
  }
  console.log(a);  // output 10
}

CONST:
const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements.
Example: const a =10;

CONST_CODE:
function assignment(){
  const MY_VARIABLE =10;
  console.log(MY_VARIABLE);  //output 10 
}




QUESTION 3: Write a brief intro on available data types in Javascript
======================================================================

JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.
1. Primitive data type
2. Non-primitive (reference) data type


    JavaScript primitive data types
    There are five types of primitive data types in JavaScript. They are as follows:

    1. StrinG:
        represents sequence of characters e.g. "hello"
    2. Number:
    	represents numeric values e.g. 100
    3. Boolean:
    	represents boolean value either false or true
    4. Undefined:
    	represents undefined value
    5. Null:
    	represents null i.e. no value at all

    JavaScript non-primitive data types
    The non-primitive data types are as follows:

    1. Object:
    	represents instance through which we can access members
    2. Array:
    	represents group of similar values
    3. RegExp:
    	represents regular expression